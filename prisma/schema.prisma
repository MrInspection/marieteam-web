datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  role          Role          @default(USER)
  accounts      Account[]
  sessions      Session[]
  reservations  Reservation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now())
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  totalAmount Float
  status      ReservationStatus @default(PENDING)
  seats       Seat[]

  updatedAt DateTime @updatedAt
}

enum ReservationStatus {
  PENDING
  PAID
}

model Seat {
  id            String       @id @default(cuid())
  crossingId    String
  crossing      Crossing     @relation(fields: [crossingId], references: [id])
  seatTypeId    String
  seatType      SeatType     @relation(fields: [seatTypeId], references: [id])
  bookedSeats   Int          @default(0)
  reservationId String?
  reservation   Reservation? @relation(fields: [reservationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([crossingId, seatTypeId])
}

model Crossing {
  id               String       @id @default(cuid())
  departureTime    DateTime
  boatId           String
  boat             Boat         @relation(fields: [boatId], references: [id])
  routeId          String
  route            Route        @relation(fields: [routeId], references: [id])
  seatAvailability Seat[]
  captainLogs      CaptainLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CaptainLog {
  id           String       @id @default(cuid())
  crossingId   String
  crossing     Crossing     @relation(fields: [crossingId], references: [id])
  seaCondition SeaCondition
  delayMinutes Int?
  delayReason  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SeatType {
  id             String       @id @default(cuid())
  name           String
  seatCategoryId String
  seatCategory   SeatCategory @relation(fields: [seatCategoryId], references: [id])
  seats          Seat[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Pricing   Pricing[]
}

model SeatCategory {
  id        String     @id @default(cuid())
  name      String
  seatTypes SeatType[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pricing {
  id      String        @id @default(cuid())
  routeId String
  route   Route         @relation(fields: [routeId], references: [id])
  typeId  String
  type    SeatType      @relation(fields: [typeId], references: [id])
  period  PricingPeriod
  amount  Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Route {
  id               String           @id @default(cuid())
  distance         Float
  departurePort    String
  arrivalPort      String
  geographicalZone GeographicalZone
  crossings        Crossing[]
  pricing          Pricing[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Boat {
  id                String     @id @default(cuid())
  name              String
  length            Float
  width             Float
  speed             Float
  imageUrl          String?
  equipment         String[]
  maxPassengerSeats Int
  maxVehicleUnder2M Int
  maxVehicleOver2M  Int
  crossings         Crossing[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PricingPeriod {
  LOW_SEASON
  MID_SEASON
  HIGH_SEASON
}

enum GeographicalZone {
  AIX
  BATZ
  BELLE_ILE_EN_MER
  BREHAT
  HOUAT
  ILE_DE_GROIX
  MOLENE
  OUESSANT
  SEIN
  YEU
}

enum SeaCondition {
  CALM
  SLIGHTLY_ROUGH
  ROUGH
  VERY_ROUGH
}

enum Role {
  USER
  CAPTAIN
  ADMIN
}
