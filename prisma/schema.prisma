datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Représente un utilisateur du système (client, capitaine, ou gestionnaire).
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  orders        Order[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  CaptainLog CaptainLog[]
}

// Auth.js - Authentication System (DO NOT EDIT MODEL BELOW)
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// Auth.js - Authentication System (DO NOT EDIT MODEL BELOW)
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Représente une commande passée par un utilisateur (booking confirmé).
model Order {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  reservations Reservation[] // Relation mise à jour
  totalAmount  Float
  status       OrderStatus   @default(PENDING)

  updatedAt DateTime @updatedAt
}

// Enumération pour le statut de la commande.
enum OrderStatus {
  PENDING
  PAID
}

// Représente une réservation temporaire avant confirmation.
model Reservation {
  id         String             @id @default(cuid()) // Anciennement "Configuration"
  orderId    String?
  order      Order?             @relation(fields: [orderId], references: [id])
  crossingId String
  crossing   Crossing           @relation(fields: [crossingId], references: [id])
  seats      SeatAvailability[] // Liste des sièges réservés par catégorie pour cette traversée

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Gère la disponibilité et les réservations des sièges pour une traversée.
model SeatAvailability {
  id            String       @id @default(cuid())
  crossingId    String
  crossing      Crossing     @relation(fields: [crossingId], references: [id])
  seatType      SeatType // Catégorie de siège (PASSENGER, VEHICLE_UNDER_2M, etc.)
  bookedSeats   Int          @default(0) // Nombre de sièges réservés
  reservationId String? // Référence à une réservation si applicable
  reservation   Reservation? @relation(fields: [reservationId], references: [id])
  quantity      Int // Nombre de sièges réservés pour une réservation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([crossingId, seatType]) // Unicité par traversée et type de siège
}

// Représente une traversée, incluant les informations de l'heure, du bateau, etc.
model Crossing {
  id            String   @id @default(cuid())
  departureTime DateTime // Date et heure de départ de la traversée
  boatId        String
  boat          Boat     @relation(fields: [boatId], references: [id])
  routeId       String
  route         Route    @relation(fields: [routeId], references: [id])

  totalPassengerSeats Int // Nombre total de sièges passagers
  totalVehicleUnder2M Int // Nombre total de places pour véhicules < 2m
  totalVehicleOver2M  Int // Nombre total de places pour véhicules > 2m

  seatAvailability SeatAvailability[] // Gestion des sièges disponibles pour la traversée
  pricing          Pricing[] // Tarification liée à cette traversée
  captainLogs      CaptainLog[] // Journaux des capitaines associés à cette traversée

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Reservation Reservation[]
}

// Journal créé par les capitaines pendant une traversée.
model CaptainLog {
  id           String       @id @default(cuid())
  crossingId   String
  crossing     Crossing     @relation(fields: [crossingId], references: [id])
  captainId    String
  captain      User         @relation(fields: [captainId], references: [id]) // Lien avec l'utilisateur capitaine
  seaCondition SeaCondition
  delayMinutes Int? // Retard en minutes
  delayReason  String? // Raison du retard (facultatif)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Représente une route ou une liaison entre deux ports.
model Route {
  id            String     @id @default(cuid())
  distance      Float // Distance en milles marins
  departurePort String // Port de départ
  arrivalPort   String // Port d'arrivée
  sector        Sector // Secteur géographique (ex: Belle-Île-en-Mer)
  crossings     Crossing[] // Traversées sur cette route

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modèle pour gérer les tarifs des traversées.
model Pricing {
  id         String        @id @default(cuid())
  crossingId String
  crossing   Crossing      @relation(fields: [crossingId], references: [id])
  seatType   SeatType // Le type de siège (PASSENGER, VEHICLE_UNDER_2M, etc.)
  seatGroup  SeatGroup // Catégorie de passager ou véhicule (ex: A1_ADULT, B1_VEHICLE_UNDER_4M)
  period     PricingPeriod // Période tarifaire (Basse saison, Moyenne saison, Haute saison)
  amount     Float // Montant pour cette combinaison de traversée, type de siège, et période

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enumération pour les périodes tarifaires.
enum PricingPeriod {
  LOW_SEASON
  MID_SEASON
  HIGH_SEASON
}

// Représente un bateau utilisé pour une traversée.
model Boat {
  id        String     @id @default(cuid())
  name      String
  length    Float
  width     Float
  speed     Float
  imageUrl  String? // URL de l'image du bateau
  equipment String[] // Liste des équipements sous forme de chaînes (ex: ["Pont Promenade", "Accès Handicapé"])
  crossings Crossing[] // Traversées associées à ce bateau

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enumération pour les types de sièges ou véhicules dans une traversée.
enum SeatType {
  PASSENGER
  VEHICLE_UNDER_2M // Véhicule < 2m
  VEHICLE_OVER_2M // Véhicule > 2m
}

// Enumération pour les groupes de passagers et véhicules dans une traversée.
enum SeatGroup {
  ADULT // Passager - Adulte
  JUNIOR // Passager - Junior (8 à 18 ans)
  CHILD // Passager - Enfant (0 à 7 ans)
  VEHICLE_UNDER_4M // Véhicule < 2m et < 4m de longueur
  VEHICLE_UNDER_5M // Véhicule < 2m et < 5m de longueur
  VAN // Véhicule > 2m (Fourgon)
  CAMPING_CAR // Camping Car
  TRUCK // Camion
}

// Enumération pour capturer les secteurs géographiques.
enum Sector {
  AIX
  BATZ
  BELLE_ILE_EN_MER
  BREHAT
  HOUAT
  ILE_DE_GROIX
  MOLENE
  OUESSANT
  SEIN
  YEU
}

// Enumération des rôles des utilisateurs dans le système.
enum Role {
  USER
  CAPTAIN
  ADMIN
}

// Enumération pour capturer l'état de la mer pendant une traversée.
enum SeaCondition {
  CALM
  SLIGHTLY_ROUGH
  ROUGH
  VERY_ROUGH
}
