datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Représente un utilisateur du système (client, capitaine, ou gestionnaire).
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  orders        Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Auth.js - Authentication System (DO NOT EDIT MODEL BELOW)
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// Auth.js - Authentication System (DO NOT EDIT MODEL BELOW)
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Représente une commande passée par un utilisateur (booking confirmé).
model Order {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  userId         String
  user           User            @relation(fields: [userId], references: [id])
  configurations Configuration[]
  totalAmount    Float
  status         OrderStatus     @default(PENDING)

  updatedAt DateTime @updatedAt
}

// Enumération pour le statut de la commande.
enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

// Représente une configuration temporaire avant confirmation (anciennement Reservation).
model Configuration {
  id         String              @id @default(cuid())
  orderId    String?
  order      Order?              @relation(fields: [orderId], references: [id])
  crossingId String
  crossing   Crossing            @relation(fields: [crossingId], references: [id])
  items      ConfigurationItem[]
  totalPrice Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Captures les détails de chaque type de siège et la quantité configurée (anciennement ReservationItem).
model ConfigurationItem {
  id              String        @id @default(cuid())
  configurationId String
  configuration   Configuration @relation(fields: [configurationId], references: [id])
  seatType        SeatType
  quantity        Int
  totalPrice      Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Seat      Seat?    @relation(fields: [seatId], references: [id])
  seatId    String?
}

// Représente une traversée, incluant les informations de l'heure, du bateau, etc.
model Crossing {
  id             String          @id @default(cuid())
  departureTime  DateTime // Date et heure de départ de la traversée
  boatId         String
  boat           Boat            @relation(fields: [boatId], references: [id])
  routeId        String
  route          Route           @relation(fields: [routeId], references: [id])
  configurations Configuration[]
  captainLogs    CaptainLog[]
  seats          Seat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Journal créé par les capitaines pendant une traversée.
model CaptainLog {
  id           String       @id @default(cuid())
  crossingId   String
  crossing     Crossing     @relation(fields: [crossingId], references: [id])
  seaCondition SeaCondition
  comment      String?
  delayMinutes Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Représente une route ou une liaison entre deux ports.
model Route {
  id        String     @id @default(cuid())
  distance  Float
  departure String
  arrival   String
  sector    Sector
  crossings Crossing[]
  pricing   Pricing[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modèle pour gérer les tarifs des traversées.
model Pricing {
  id       String          @id @default(cuid())
  routeId  String
  route    Route           @relation(fields: [routeId], references: [id])
  category PricingCategory
  period   PricingPeriod
  amount   Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Représente un bateau utilisé pour une traversée.
model Boat {
  id        String     @id @default(cuid())
  name      String
  length    Float
  width     Float
  speed     Float
  image     String?
  equipment String[]
  crossings Crossing[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Représente les types de places disponibles dans une traversée donnée.
model Seat {
  id             String              @id @default(cuid())
  type           SeatType
  available      Int
  crossingId     String
  crossing       Crossing            @relation(fields: [crossingId], references: [id])
  configurations ConfigurationItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enumération pour les catégories de tarification.
enum PricingCategory {
  A1_ADULT // Passager - Adulte
  A2_JUNIOR // Passager - Junior (8 à 18 ans)
  A3_CHILD // Passager - Enfant (0 à 7 ans)
  B1_VEHICLE_UNDER_4M // Véhicule < 2m et < 4m de longueur
  B2_VEHICLE_UNDER_5M // Véhicule < 2m et < 5m de longueur
  C1_VEHICLE_OVER_2M // Véhicule > 2m (Fourgon)
  C2_CAMPING_CAR // Camping Car
  C3_TRUCK // Camion
}

// Enumération pour les périodes tarifaires.
enum PricingPeriod {
  LOW_SEASON
  MID_SEASON
  HIGH_SEASON
}

// Enumération pour les types de places ou véhicules dans une traversée.
enum SeatType {
  PASSENGER
  VEHICLE_UNDER_2M // Véhicule < 2m
  VEHICLE_OVER_2M // Véhicule > 2m
}

// Enumération pour capturer les secteurs géographiques.
enum Sector {
  AIX
  BATZ
  BELLE_ILE_EN_MER
  BREHAT
  HOUAT
  ILE_DE_GROIX
  MOLENE
  OUESSANT
  SEIN
  YEU
}

// Enumération des rôles des utilisateurs dans le système.
enum Role {
  USER
  CAPTAIN
  ADMIN
}

// Enumération pour capturer l'état de la mer pendant une traversée.
enum SeaCondition {
  CALM
  SLIGHTLY_ROUGH
  ROUGH
  VERY_ROUGH
}
